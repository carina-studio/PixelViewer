<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
		xmlns:aConverters="using:Avalonia.Data.Converters"
		xmlns:as="using:CarinaStudio.AppSuite"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:asViewModels="using:CarinaStudio.AppSuite.ViewModels"
		xmlns:app="using:Carina.PixelViewer"
		xmlns:appConverters="using:Carina.PixelViewer.Data.Converters"
		xmlns:appImageFilters="using:Carina.PixelViewer.Media.ImageFilters"
		xmlns:appImageRenderers="using:Carina.PixelViewer.Media.ImageRenderers"
		xmlns:appMedia="using:Carina.PixelViewer.Media"
        xmlns:appViewModels="using:Carina.PixelViewer.ViewModels"
        xmlns:cs="using:CarinaStudio"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="Carina.PixelViewer.Controls.ApplicationOptionsDialog"
        x:CompileBindings="True"
        x:DataType="appViewModels:AppOptions">

	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" BoxShadow="{StaticResource BoxShadows/None}" DockPanel.Dock="Bottom">
			<StackPanel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{ReflectionBinding $parent[Window].GenerateResultCommand}" Content="{DynamicResource String/Common.OK}"/>
			</StackPanel>
		</Border>
		
		<!-- Navigation bar -->
		<Border Classes="ToolBar" DockPanel.Dock="Left">
			<asControls:ToolBarScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
				<StackPanel>
					
					<!-- User interface -->
					<ToggleButton Name="userInterfacePanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptions.UserInterface}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.UserInterface.Outline}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.UserInterface.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Image format -->
					<ToggleButton Name="imageFormatPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptionsDialog.ImageFormat}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Image.Outline}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Image.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Image dimensions evaluation -->
					<ToggleButton Name="imageDimensionsEvaluationPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptionsDialog.ImageDimensionsEvaluation}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Dimensions}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Dimensions.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Colors -->
					<ToggleButton Name="colorsPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptionsDialog.Colors}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Color.Outline}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Color.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Image filter -->
					<ToggleButton Name="imageFilterPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptionsDialog.ImageFilter}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.ImageFilter}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.ImageFilter.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Other -->
					<ToggleButton Name="othersPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptions.Others}">
						<Panel>
							<Image Classes="Icon" IsVisible="{ReflectionBinding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Tool.Outline}"/>
							<Image Classes="Icon" IsVisible="{ReflectionBinding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Tool.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
				</StackPanel>
			</asControls:ToolBarScrollViewer>
		</Border>

		<!-- Content -->
		<Panel>
			<ScrollViewer Name="contentScrollViewer">
				<StackPanel Classes="Dialog_ContentPanel_WithItemsGroups">

					<!-- User interface -->
					<StackPanel Name="userInterfacePanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptions.UserInterface}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>
							
								<!-- Theme mode -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.ThemeMode}"/>
										<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*">
											<Grid.IsVisible>
												<MultiBinding Converter="{x:Static aConverters:BoolConverters.And}">
													<Binding Path="IsRestartingRootWindowsNeeded"/>
													<Binding Path="IsThemeModeChanged"/>
												</MultiBinding>
											</Grid.IsVisible>
											<Image Classes="Dialog_Icon" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding !HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillCloseAllWindowsToTakeEffect}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillRestartMainWindowsToTakeEffect}"/>
										</Grid>
									</StackPanel>
									<ComboBox Classes="Dialog_Item_ComboBox" ItemsSource="{Binding ThemeModes, Mode=OneTime}" SelectedItem="{Binding ThemeMode, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Converter={x:Static asViewModels:ApplicationOptions.ThemeModeConverter}}"/>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Compact UI -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.UseCompactUserInterface}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptions.UseCompactUserInterface.Description}">
											<TextBlock.IsVisible>
												<MultiBinding Converter="{x:Static aConverters:BoolConverters.Or}">
													<Binding Path="!IsRestartingRootWindowsNeeded"/>
													<Binding Path="!IsUseCompactUserInterfaceChanged"/>
												</MultiBinding>
											</TextBlock.IsVisible>
										</TextBlock>
										<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*">
											<Grid.IsVisible>
												<MultiBinding Converter="{x:Static aConverters:BoolConverters.And}">
													<Binding Path="IsRestartingRootWindowsNeeded"/>
													<Binding Path="IsUseCompactUserInterfaceChanged"/>
												</MultiBinding>
											</Grid.IsVisible>
											<Image Classes="Dialog_Icon" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding !HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillCloseAllWindowsToTakeEffect}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillRestartMainWindowsToTakeEffect}"/>
										</Grid>
									</StackPanel>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseCompactUserInterface, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Enable blurry background -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.EnableBlurryBackground}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EnableBlurryBackground, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Culture -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.Culture}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type as:ApplicationCulture}" SelectedItem="{Binding Culture, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Use embedded fonts for Chinese -->
								<StackPanel IsVisible="{Binding IsUseEmbeddedFontsForChineseSupported}">
									<asControls:DialogItem>
										<StackPanel Classes="Dialog_Item_Text_Container">
											<WrapPanel>
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.UseEmbeddedFontsForChinese}"/>
												<Button Classes="Dialog_Info_Button" Command="{ReflectionBinding $parent[Window].OpenNotoSansDocument}" ToolTip.Tip="{DynamicResource String/Common.Help}">
													<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
												</Button>
											</WrapPanel>
											<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding IsUseEmbeddedFontsForChineseChanged}">
												<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
												<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
											</Grid>
										</StackPanel>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseEmbeddedFontsForChinese, Mode=TwoWay}"/>
									</asControls:DialogItem>
									<Separator Classes="Dialog_Item_Separator"/>
								</StackPanel>
								
								<!-- Hide scroll bars automatically -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.HideImageViewerScrollBarsAutomatically}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding HideImageViewerScrollBarsAutomatically, Mode=TwoWay}"/>
								</asControls:DialogItem>
								
								<!-- Disable ANGLE -->
								<StackPanel IsVisible="{Binding IsDisableAngleSupported}">
									<Separator Classes="Dialog_Item_Separator"/>
									<asControls:DialogItem>
										<StackPanel Classes="DIalog_Item_Text_Container">
											<WrapPanel>
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.DisableAngle}"/>
												<Button Classes="Dialog_Info_Button" Command="{x:Static cs:PlatformCommands.OpenLinkCommand}" CommandParameter="https://en.wikipedia.org/wiki/ANGLE_(software)" ToolTip.Tip="{DynamicResource String/Common.Help}">
													<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
												</Button>
											</WrapPanel>
											<TextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding !#restartNeededByDisablingAngle.IsVisible}" Text="{DynamicResource String/ApplicationOptions.DisableAngle.Description}"/>
											<Grid Name="restartNeededByDisablingAngle" Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding IsDisableAngleChanged}">
												<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
												<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
											</Grid>
										</StackPanel>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding DisableAngle, Mode=TwoWay}"/>
									</asControls:DialogItem>
								</StackPanel>
							
							</StackPanel>
						</Border>
					</StackPanel>
					<Separator Classes="Dialog_Separator_Large"/>

					<!-- Image format -->
					<StackPanel Name="imageFormatPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptionsDialog.ImageFormat}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Default renderer -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageRendererFormatName}"/>
									<ComboBox Classes="Dialog_Item_ComboBox" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{x:Static appImageRenderers:ImageRenderers.All}" SelectedItem="{Binding DefaultImageRenderer, Mode=TwoWay}">
										<ComboBox.DataTemplates>
											<DataTemplate DataType="{x:Type appImageRenderers:IImageRenderer}">
												<Grid ColumnDefinitions="*,Auto">
													<TextBlock Text="{Binding Format, Converter={x:Static appConverters:ImageFormatConverter.Default}}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
													<Border Background="{Binding Format.Category, Converter={x:Static appConverters:ImageFormatCategoryToBrushConverter.Default}}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" Margin="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
														<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{Binding Format.Category, Converter={x:Static appConverters:EnumConverters.ImageFormatCategory}}"/>
													</Border>
												</Grid>
											</DataTemplate>
										</ComboBox.DataTemplates>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Evaluate by file name -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageRendererByFileName}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EvaluateImageRendererByFileName, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Reset renderer after opening file -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.UseDefaultImageRendererAfterOpeningSourceFile}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseDefaultImageRendererAfterOpeningSourceFile, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Default byte ordering -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultByteOrdering}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type app:ByteOrdering}" SelectedItem="{Binding DefaultByteOrdering, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- YUV to RGB conversion -->
								<asControls:DialogItem>
									<WrapPanel VerticalAlignment="Center">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultYuvToBgraConverter}"/>
										<Button Classes="Dialog_Info_Button" Command="{x:Static cs:PlatformCommands.OpenLinkCommand}" CommandParameter="https://en.wikipedia.org/wiki/YUV" ToolTip.Tip="{DynamicResource String/Common.Help}">
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
										</Button>
									</WrapPanel>
									<ComboBox Classes="Dialog_Item_ComboBox" ItemsSource="{x:Static appMedia:YuvToBgraConverter.All}" SelectedItem="{Binding DefaultYuvToBgraConverter, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate x:CompileBindings="True" x:DataType="appMedia:YuvToBgraConverter">
												<TextBlock Text="{Binding Converter={x:Static appConverters:YuvToBgraConverterToStringConverter.Default}}"/>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								
							</StackPanel>
						</Border>
					</StackPanel>
					<Separator Classes="Dialog_Separator_Large"/>

					<!-- Image dimensions evaluation -->
					<StackPanel Name="imageDimensionsEvaluationPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptionsDialog.ImageDimensionsEvaluation}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Default aspect ratio -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageDimensionsEvaluationAspectRatio}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageDimensionsEvaluationAspectRatio.Description}"/>
									</StackPanel>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type appMedia:AspectRatio}" SelectedItem="{Binding DefaultImageDimensionsEvaluationAspectRatio, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Evaluate after opening file -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageDimensionsAfterOpeningSourceFile}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EvaluateImageDimensionsAfterOpeningSourceFile, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Evaluate after changing renderer -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageDimensionsAfterChangingRenderer}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EvaluateImageDimensionsAfterChangingRenderer, Mode=TwoWay}"/>
								</asControls:DialogItem>
								
							</StackPanel>
						</Border>
					</StackPanel>
					<Separator Classes="Dialog_Separator_Large"/>

					<!-- Colors -->
					<StackPanel Name="colorsPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptionsDialog.Colors}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Show ARGB color -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelArgbColor}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelArgbColor, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Show L*a*b* color -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelLabColor}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelLabColor, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Show XYZ color -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelXyzColor}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelXyzColor, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Use 32-bit colors only -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.Render32BitColorsOnly}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.Render32BitColorsOnly.Description}"/>
									</StackPanel>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding Render32BitColorsOnly, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Enable color space management -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<WrapPanel>
											<TextBlock Name="enableColorSpaceManagementLabel" Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.EnableColorSpaceManagement}"/>
											<Button Classes="Dialog_Info_Button" Command="{x:Static cs:PlatformCommands.OpenLinkCommand}" CommandParameter="https://en.wikipedia.org/wiki/Color_management" ToolTip.Tip="{DynamicResource String/Common.Help}">
												<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
											</Button>
										</WrapPanel>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.ColorSpaceManagement.Description}"/>
									</StackPanel>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EnableColorSpaceManagement, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Default color space -->
								<asControls:DialogItem>
									<WrapPanel VerticalAlignment="Center">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultColorSpace}"/>
										<Button Classes="Dialog_Info_Button" Command="{ReflectionBinding $parent[Window].ShowColorSpaceInfoCommand}" CommandParameter="{Binding #defaultColorSpaceComboBox.SelectedItem}" IsEnabled="{Binding EnableColorSpaceManagement}">
											<ToolTip.Tip>
												<cs:FormattedString Arg1="{ReflectionBinding #defaultColorSpaceComboBox.SelectedItem, Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}" Format="{DynamicResource String/ApplicationOptionsDialog.ColorSpaceDetails}"/>
											</ToolTip.Tip>
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Information.Outline}"/>
										</Button>
									</WrapPanel>
									<ComboBox Name="defaultColorSpaceComboBox" Classes="Dialog_Item_ComboBox" IsEnabled="{Binding EnableColorSpaceManagement}" ItemsSource="{x:Static appMedia:ColorSpace.AllColorSpaces}" SelectedItem="{Binding DefaultColorSpace, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate x:CompileBindings="True" x:DataType="appMedia:ColorSpace">
												<Grid ColumnDefinitions="*,Auto">
													<TextBlock Text="{Binding Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}" VerticalAlignment="Center"/>
													<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.SystemDefined}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsSystemDefined}" Margin="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
														<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/SessionControl.ColorSpace.SystemDefined}"/>
													</Border>
													<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.Custom}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsUserDefined}" Margin="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
														<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/Common.Custom}"/>
													</Border>
												</Grid>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Screen color space -->
								<asControls:DialogItem>
									<WrapPanel VerticalAlignment="Center">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ScreenColorSpace}"/>
										<Button Classes="Dialog_Info_Button" Command="{ReflectionBinding $parent[Window].ShowColorSpaceInfoCommand}" CommandParameter="{Binding #screenColorSpaceComboBox.SelectedItem}" IsEnabled="{Binding EnableColorSpaceManagement}">
											<ToolTip.Tip>
												<cs:FormattedString Arg1="{ReflectionBinding #screenColorSpaceComboBox.SelectedItem, Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}" Format="{DynamicResource String/ApplicationOptionsDialog.ColorSpaceDetails}"/>
											</ToolTip.Tip>
											<Image Classes="Icon" Source="{DynamicResource Image/Icon.Information.Outline}"/>
										</Button>
									</WrapPanel>
									<ComboBox Name="screenColorSpaceComboBox" Classes="Dialog_Item_ComboBox" IsEnabled="{Binding EnableColorSpaceManagement}" ItemsSource="{x:Static appMedia:ColorSpace.AllColorSpaces}" SelectedItem="{Binding ScreenColorSpace, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate x:CompileBindings="True" x:DataType="appMedia:ColorSpace">
												<Grid ColumnDefinitions="*,Auto">
													<TextBlock Text="{Binding Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}" VerticalAlignment="Center"/>
													<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.SystemDefined}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsSystemDefined}" Margin="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
														<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/SessionControl.ColorSpace.SystemDefined}"/>
													</Border>
													<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.Custom}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsUserDefined}" Margin="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
														<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/Common.Custom}"/>
													</Border>
												</Grid>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Use system screen color space -->
								<StackPanel IsVisible="{Binding IsSystemScreenColorSpaceSupported}">
									<asControls:DialogItem>
										<StackPanel Classes="Dialog_Item_Text_Container">
											<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.UseSystemScreenColorSpace}"/>
											<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.UseSystemScreenColorSpace.Description}"/>
										</StackPanel>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseSystemScreenColorSpace, Mode=TwoWay}" IsEnabled="{Binding EnableColorSpaceManagement}"/>
									</asControls:DialogItem>
									<Separator Classes="Dialog_Item_Separator"/>
								</StackPanel>

								<!-- Custom color spaces -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.CustomColorSpaces}"/>
									<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Right" IsVisible="{Binding !#customColorSpaceListBox.IsVisible}" Text="{DynamicResource String/Common.None}"/>
								</asControls:DialogItem>
								<Line Classes="Dialog_Item_Separator_Inner"/>
								<asControls:ListBox Name="customColorSpaceListBox" Classes="Dialog_Item_ListBox" IsVisible="{Binding $self.ItemCount}" ItemsSource="{x:Static appMedia:ColorSpace.UserDefinedColorSpaces}">
									<asControls:ListBox.ItemTemplate>
										<DataTemplate x:CompileBindings="True" x:DataType="appMedia:ColorSpace">
											<Grid ColumnDefinitions="*,Auto">
												<TextBlock Text="{Binding CustomName}" TextTrimming="CharacterEllipsis"/>
												<Border Classes="InPlaceAction_Reserved"/>
												<StackPanel Grid.Column="1" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
													<Button Classes="InPlaceAction_Button" Command="{ReflectionBinding $parent[Window].RemoveCustomColorSpaceCommand}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
														<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
													</Button>
													<Button Classes="InPlaceAction_Button" Command="{ReflectionBinding $parent[Window].ShowColorSpaceInfoCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
														<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
													</Button>
												</StackPanel>
											</Grid>
										</DataTemplate>
									</asControls:ListBox.ItemTemplate>
								</asControls:ListBox>
								<Separator Classes="Dialog_Separator_Small" IsVisible="{Binding #customColorSpaceListBox.IsVisible}"/>
								<Button Classes="Dialog_Item_Button" Command="{ReflectionBinding $parent[Window].AddCustomColorSpaceCommand}" Content="{DynamicResource String/Common.Add.WithDialog}"/>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Timing of conversion -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ColorSpaceConversionTiming}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type appMedia:ColorSpaceConversionTiming}" SelectedItem="{Binding ColorSpaceConversionTiming, Mode=TwoWay}"/>
								</asControls:DialogItem>
								
							</StackPanel>
						</Border>
					</StackPanel>
					<Separator Classes="Dialog_Separator_Large"/>

					<!-- Image filter -->
					<StackPanel Name="imageFilterPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptionsDialog.ImageFilter}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Brightness transformation -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.BrightnessTransformationFunction}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type appImageFilters:BrightnessTransformationFunction}" SelectedItem="{Binding BrightnessTransformationFunction, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Contrast transformation -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ContrastTransformationFunction}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type appImageFilters:ContrastTransformationFunction}" SelectedItem="{Binding ContrastTransformationFunction, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Reset filter params after opening file -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ResetFilterParamsAfterOpeningSourceFile}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ResetFilterParamsAfterOpeningSourceFile, Mode=TwoWay}"/>
								</asControls:DialogItem>
								
							</StackPanel>
						</Border>
					</StackPanel>
					<Separator Classes="Dialog_Separator_Large"/>

					<!-- Other -->
					<StackPanel Name="othersPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptions.Others}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Create new tab for drag-and-drop file -->
								<StackPanel IsVisible="{ReflectionBinding $parent[Window].IsDragAndDropSupported}">
									<asControls:DialogItem>
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.CreateNewSessionForDragDropFile}"/>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding CreateNewSessionForDragDropFile, Mode=TwoWay}"/>
									</asControls:DialogItem>
									<Separator Classes="Dialog_Item_Separator"/>
								</StackPanel>

								<!-- Reset plane options after changing dimensions -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ResetImagePlaneOptionsAfterChangingImageDimensions}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ResetImagePlaneOptionsAfterChangingImageDimensions, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Apply orientation on saved images -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.SaveRenderedImageWithOrientation}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SaveRenderedImageWithOrientation, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Show process info -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.ShowProcessInfo}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowProcessInfo, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Notify application update -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.NotifyApplicationUpdate}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding NotifyApplicationUpdate, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Accept non-stable update -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.AcceptNonStableApplicationUpdate}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding AcceptNonStableApplicationUpdate, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Max rendered images memory usage -->
								<asControls:DialogItem>
									<TextBlock Name="maxRenderedImagesMemoryUsageLabel" Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptionsDialog.MaxRenderedImagesMemoryUsage}"/>
									<abControls:IntegerTextBox Name="maxRenderedImageMemoryUsageTextBox" Classes="Dialog_Item_TextBox" IsNullValueAllowed="False" Minimum="128" Value="{Binding MaxRenderedImagesMemoryUsageMB, Mode=TwoWay}"/>
								</asControls:DialogItem>

								<!-- Log output target port -->
								<StackPanel IsVisible="{ReflectionBinding $parent[Window].Application.IsDebugMode}">
									<Separator Classes="Dialog_Item_Separator"/>
									<asControls:DialogItem>
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.LogOutputTargetPort}"/>
										<abControls:IntegerTextBox Classes="Dialog_Item_TextBox" IsNullValueAllowed="False" Maximum="65535" Minimum="1000" Value="{Binding LogOutputTargetPort, Mode=TwoWay}"/>
									</asControls:DialogItem>
								</StackPanel>
								
							</StackPanel>
						</Border>
					</StackPanel>
					
				</StackPanel>
			</ScrollViewer>
			<Border BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Light}" IsHitTestVisible="False" Margin="0,-100,-100,0"/>
		</Panel>
		
	</DockPanel>
	
</Window>
