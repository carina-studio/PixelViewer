<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:c="using:CarinaStudio"
			 xmlns:abControls="using:CarinaStudio.Controls"
			 xmlns:abConverters="using:CarinaStudio.Data.Converters"
			 xmlns:aConverters="using:Avalonia.Data.Converters"
			 xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
			 xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
			 xmlns:app="using:Carina.PixelViewer"
             xmlns:appControls="clr-namespace:Carina.PixelViewer.Controls"
             xmlns:appConverters="clr-namespace:Carina.PixelViewer.Data.Converters"
             xmlns:appImageRenderers="clr-namespace:Carina.PixelViewer.Media.ImageRenderers"
             xmlns:appMedia="clr-namespace:Carina.PixelViewer.Media"
			 xmlns:appProfiles="using:Carina.PixelViewer.Media.Profiles"
			 xmlns:appViewModels="clr-namespace:Carina.PixelViewer.ViewModels"
			 xmlns:ia="using:Avalonia.Xaml.Interactivity"
             xmlns:iaCore="using:Avalonia.Xaml.Interactions.Core"
			 xmlns:sys="using:System"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="Carina.PixelViewer.Controls.SessionControl"
			 Background="{DynamicResource Brush/Window.Background}">
	
	<!-- Resources -->
	<UserControl.Resources>

		<!-- Evaluate image dimensions -->
		<ContextMenu x:Key="evaluateImageDimensionsMenu" PlacementMode="Bottom">
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Unknown}" Header="{DynamicResource String/AspectRatio.Unknown}"/>
			<Separator/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_4x3}" Header="4:3"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_16x9}" Header="16:9"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_3x2}" Header="3:2"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_1x1}" Header="1:1"/>
			<Separator/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_3x4}" Header="3:4"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_9x16}" Header="9:16"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_2x3}" Header="2:3"/>
		</ContextMenu>

		<!-- File actions -->
		<ContextMenu x:Key="fileActionsMenu" PlacementMode="Top">
			<MenuItem Command="{Binding $parent[UserControl].CopyFileName}" Header="{DynamicResource String/SessionControl.CopyFileName}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].CopyFilePath}" Header="{DynamicResource String/SessionControl.CopyFilePath}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].ShowSourceFileInFileExplorer}" Header="{DynamicResource String/SessionControl.ShowFileInExplorer}" IsEnabled="{x:Static c:Platform.IsOpeningFileManagerSupported}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.FileManager.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Other actions -->
		<ContextMenu x:Key="otherActionsMenu" PlacementMode="Bottom">
			<MenuItem Command="{Binding $parent[Window].ShowAppOptions}" Header="{DynamicResource String/SessionControl.ApplicationOptions}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Settings.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].CheckForApplicationUpdateAsync}" Header="{DynamicResource String/SessionControl.CheckForApplicationUpdate}">
				<MenuItem.Icon>
					<Panel>
						<Image Classes="MenuItem_Icon" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static aConverters:ObjectConverters.IsNull}}" Source="{StaticResource Image/Icon.Update.Outline}"/>
						<Image Classes="MenuItem_Icon" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static aConverters:ObjectConverters.IsNotNull}}" Source="{StaticResource Image/Icon.Update.Outline.Colored}"/>
					</Panel>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Name="editConfigMenuItem" Command="{Binding $parent[Window].ShowConfigurationEditor}" Header="Edit Configurationsâ€¦" IsVisible="False"/>
			<Separator/>
			<MenuItem Command="{Binding $parent[Window].CreateMainWindow}" Header="{DynamicResource String/Common.CreateWindow}" InputGesture="Ctrl+N">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.AddWindow}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Horizontal}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Horizontal}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Horizontal}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Vertical}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Vertical}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Vertical}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Tile}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Tile}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Tile}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[Window].ShowApplicationInfoDialogAsync}" Header="{DynamicResource String/SessionControl.ApplicationInfo}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Information.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>
		
	</UserControl.Resources>

	<!-- Content -->
	<Grid RowDefinitions="Auto,*,Auto">

		<!-- Tool bar -->
		<Border Classes="ToolBar">
			<Grid ColumnDefinitions="*,Auto">

				<!-- Image actions -->
				<asControls:ToolBarScrollViewer>
					<StackPanel Background="{x:Static Brushes.Transparent}" Orientation="Horizontal">

						<!-- Open file -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].OpenSourceFileCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.OpenSourceFile}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.OpenFile}"/>
						</Button>

						<!-- Save image -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SaveImageCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.SaveImage}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Save}"/>
						</Button>

						<!-- Refresh -->
						<Button Classes="ToolBar_Button" Command="{Binding RenderImageCommand}" ToolTip.Tip="{DynamicResource String/Common.Refresh}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Refresh}"/>
						</Button>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Fit to viewport -->
						<ToggleButton Classes="ToolBar_ToggleButton" IsChecked="{Binding FitImageToViewport, Mode=TwoWay}" IsEnabled="{Binding IsSourceFileOpened}" ToolTip.Tip="{DynamicResource String/SessionControl.FitRenderedImageToViewport}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.FitToScreen}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.FitToScreen.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

						<!-- Zoom-out -->
						<RepeatButton Name="zoomOutButton" Classes="ToolBar_RepeatButton" Command="{Binding ZoomOutCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.ZoomOut}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.ZoomOut}"/>
						</RepeatButton>

						<!-- Zoom -->
						<Panel>
							<Panel.IsEnabled>
								<MultiBinding Converter="{x:Static aConverters:BoolConverters.Or}">
									<Binding Path="IsEffectivelyEnabled" ElementName="zoomOutButton"/>
									<Binding Path="IsEffectivelyEnabled" ElementName="zoomInButton"/>
								</MultiBinding>
							</Panel.IsEnabled>
							<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="0000%"/>
							<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center" Text="{Binding RequestedImageDisplayScale, Converter={x:Static asConverters:RatioToPercentageConverter.Default}}"/>
						</Panel>

						<!-- Zoom-in -->
						<RepeatButton Name="zoomInButton" Classes="ToolBar_RepeatButton" Command="{Binding ZoomInCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.ZoomIn}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.ZoomIn}"/>
						</RepeatButton>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Rotate-left -->
						<Button Name="rotateLeftButton" Classes="ToolBar_Button" Command="{Binding RotateLeftCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.RotateLeft}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.RotateLeft}"/>
						</Button>

						<!-- Rotation -->
						<Panel>
							<Panel.IsEnabled>
								<MultiBinding Converter="{x:Static aConverters:BoolConverters.Or}">
									<Binding Path="IsEffectivelyEnabled" ElementName="rotateLeftButton"/>
									<Binding Path="IsEffectivelyEnabled" ElementName="rotateRightButton"/>
								</MultiBinding>
							</Panel.IsEnabled>
							<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="0000"/>
							<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center" Text="{Binding ImageDisplayRotation, Converter={x:Static appConverters:DegreesToStringConverter.Default}}"/>
						</Panel>

						<!-- Rotate-right -->
						<Button Name="rotateRightButton" Classes="ToolBar_Button" Command="{Binding RotateRightCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.RotateRight}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.RotateRight}"/>
						</Button>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Histograms -->
						<ToggleButton Name="histogramsButton" Classes="ToolBar_ToggleButton" IsChecked="{Binding IsHistogramsVisible, Mode=TwoWay}" IsEnabled="{Binding !$parent[UserControl].IsHistogramsDisabled}" ToolTip.Tip="{DynamicResource String/SessionControl.Histograms}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Histogram}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Histogram.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Frame navigation -->
						<StackPanel Orientation="Horizontal">

							<!-- First frame -->
							<Button Classes="ToolBar_Button" Command="{Binding MoveToFirstFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToFirstFrame}">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.FastBackward}"/>
							</Button>

							<!-- Previous frame -->
							<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding MoveToPreviousFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToPreviousFrame}">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
							</RepeatButton>

							<!-- Frame -->
							<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].MoveToSpecificFrame}" IsEnabled="{Binding HasMultipleFrames}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToSpecificFrame}" Width="NaN">
								<Panel>
									<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="000 / 000"/>
									<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center">
										<TextBlock.Text>
											<MultiBinding StringFormat="{}{0} / {1}">
												<Binding Path="FrameNumber"/>
												<Binding Path="FrameCount"/>
											</MultiBinding>
										</TextBlock.Text>
									</TextBlock>
								</Panel>
							</Button>

							<!-- Next frame -->
							<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding MoveToNextFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToNextFrame}">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
							</RepeatButton>

							<!-- Last frame -->
							<Button Classes="ToolBar_Button" Command="{Binding MoveToLastFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToLastFrame}">
								<Image Classes="Icon" Source="{StaticResource Image/Icon.FastForward}"/>
							</Button>

						</StackPanel>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"/>

						<!-- Brightness and contrast adjustment -->
						<ToggleButton Name="brightnessAndContrastAdjustmentButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].OpenBrightnessAndContrastAdjustmentPopup}" IsEnabled="{Binding IsBrightnessAdjustmentSupported}" ToolTip.Tip="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Contrast}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Contrast.Active}" IsVisible="{Binding HasBrightnessAdjustment}">
									<Image.IsVisible>
										<MultiBinding Converter="{x:Static aConverters:BoolConverters.Or}">
											<Binding Path="HasBrightnessAdjustment"/>
											<Binding Path="HasContrastAdjustment"/>
											<Binding Path="HasHighlightAdjustment"/>
											<Binding Path="HasShadowAdjustment"/>
										</MultiBinding>
									</Image.IsVisible>
								</Image>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Contrast.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
								<Popup Name="brightnessAndContrastAdjustmentPopup" Classes="SessionControl_FilterParamsPopup">
									<Border Name="brightnessAndContrastAdjustmentPopupBorder" Classes="SessionControl_FilterParamsPopup">
										<Border.Transitions>
											<Transitions>
												<DoubleTransition Property="Opacity" Duration="{StaticResource TimeSpan/Animation.Fast}"/>
											</Transitions>
										</Border.Transitions>
										<DockPanel>
											<Border DockPanel.Dock="Bottom" Padding="{StaticResource Thickness/Dialog.ControlButtonsPanel.Padding}">
												<Button Classes="Dialog_ControlButton" Command="{Binding $parent[UserControl].ResetBrightnessAndContrastAdjustmentCommand}" Content="{DynamicResource String/Common.Reset}" HorizontalAlignment="Center"/>
											</Border>
											<StackPanel Classes="Dialog_ContentPanel">

												<!-- Brightness -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding BrightnessAdjustment, StringFormat={}{0:+0.00;-0.00} EV}" Format="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Brightness}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="brightnessAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #brightnessAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="brightnessAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Maximum="2" Minimum="-2" TickFrequency="0.05" Value="{Binding BrightnessAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="brightnessAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #brightnessAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Contrast -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding ContrastAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Contrast}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="contrastAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #contrastAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="contrastAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Maximum="1" Minimum="-1" TickFrequency="0.01" Value="{Binding ContrastAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="contrastAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #contrastAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Highlight -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding HighlightAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Highlight}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="highlightAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #highlightAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="highlightAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Maximum="1" Minimum="-1" TickFrequency="0.01" Value="{Binding HighlightAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="highlightAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #highlightAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Shadow -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding ShadowAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Shadow}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="shadowAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #shadowAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="shadowAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Maximum="1" Minimum="-1" TickFrequency="0.01" Value="{Binding ShadowAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="shadowAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #shadowAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>

											</StackPanel>
										</DockPanel>
									</Border>
								</Popup>
							</Panel>
						</ToggleButton>

						<!-- Color adjustment -->
						<ToggleButton Name="colorAdjustmentButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].OpenColorAdjustmentPopup}" IsEnabled="{Binding IsColorAdjustmentSupported}" ToolTip.Tip="{DynamicResource String/SessionControl.ColorAdjustment}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Color}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Color.Active}">
									<Image.IsVisible>
										<MultiBinding Converter="{x:Static aConverters:BoolConverters.Or}">
											<Binding Path="HasColorAdjustment"/>
											<Binding Path="HasSaturationAdjustment"/>
											<Binding Path="HasVibranceAdjustment"/>
										</MultiBinding>
									</Image.IsVisible>
								</Image>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Color.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
								<Popup Name="colorAdjustmentPopup" Classes="SessionControl_FilterParamsPopup">
									<Border Name="colorAdjustmentPopupBorder" Classes="SessionControl_FilterParamsPopup">
										<Border.Transitions>
											<Transitions>
												<DoubleTransition Property="Opacity" Duration="{StaticResource TimeSpan/Animation.Fast}"/>
											</Transitions>
										</Border.Transitions>
										<DockPanel>
											<Border DockPanel.Dock="Bottom" Padding="{StaticResource Thickness/Dialog.ControlButtonsPanel.Padding}">
												<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
													<Button Classes="Dialog_ControlButton" Command="{Binding SelectColorAdjustmentCommand}" Content="{DynamicResource String/SessionControl.SelectColorAdjustment}"/>
													<Button Classes="Dialog_ControlButton" Command="{Binding $parent[UserControl].ResetColorAdjustmentCommand}" Content="{DynamicResource String/Common.Reset}"/>
												</StackPanel>
											</Border>
											<StackPanel Classes="Dialog_ContentPanel">
												<StackPanel.Styles>
													<Style Selector="Slider">
														<Setter Property="Maximum" Value="1"/>
														<Setter Property="Minimum" Value="-1"/>
														<Setter Property="TickFrequency" Value="0.01"/>
													</Style>
												</StackPanel.Styles>

												<!-- Red -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding RedColorAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.ColorAdjustment.Label.Red}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="redColorAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #redColorAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="redColorAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Value="{Binding RedColorAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="redColorAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #redColorAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Green -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding GreenColorAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.ColorAdjustment.Label.Green}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="greenColorAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #greenColorAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="greenColorAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Value="{Binding GreenColorAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="greenColorAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #greenColorAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Blue -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding BlueColorAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.ColorAdjustment.Label.Blue}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="blueColorAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #blueColorAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="blueColorAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Value="{Binding BlueColorAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="blueColorAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #blueColorAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Saturation -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding SaturationAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.ColorAdjustment.Label.Saturation}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="saturationAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #saturationAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="saturationAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Value="{Binding SaturationAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="saturationAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #saturationAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Vibrance -->
												<abControls:FormattedTextBlock Classes="Dialog_TextBlock" Arg1="{Binding VibranceAdjustment, StringFormat={}{0:+0.00;-0.00}}" Format="{DynamicResource String/SessionControl.ColorAdjustment.Label.Vibrance}" HorizontalAlignment="Center"/>
												<Grid ColumnDefinitions="Auto,*,Auto">
													<RepeatButton Name="vibranceAdjustmentDecreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Decrease" Command="{Binding $parent[UserControl].DecreaseSliderValue}" CommandParameter="{Binding #vibranceAdjustmentSlider}">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Backward}"/>
													</RepeatButton>
													<Slider Name="vibranceAdjustmentSlider" Classes="SessionControl_FilterParamsSlider" Grid.Column="1" Value="{Binding VibranceAdjustment, Mode=TwoWay}"/>
													<RepeatButton Name="vibranceAdjustmentIncreaseButton" Classes="SessionControl_FilterParamsSlider_SmallChangeButton_Increase" Command="{Binding $parent[UserControl].IncreaseSliderValue}" CommandParameter="{Binding #vibranceAdjustmentSlider}" Grid.Column="2">
														<Image Classes="Icon" Source="{StaticResource Image/Icon.Forward}"/>
													</RepeatButton>
												</Grid>

											</StackPanel>
										</DockPanel>
									</Border>
								</Popup>
							</Panel>
						</ToggleButton>

					</StackPanel>
				</asControls:ToolBarScrollViewer>

				<!-- Other actions -->
				<StackPanel Grid.Column="1" Orientation="Horizontal">

					<!-- Test -->
					<Button Name="testButton" Classes="ToolBar_Button" Command="{Binding $parent[UserControl].OnTestButtonClick}" IsVisible="False">
						<Image Classes="Icon" Source="{StaticResource Image/Icon.Lab}"/>
					</Button>

					<!-- Rendering params panel -->
					<ToggleButton Classes="ToolBar_ToggleButton" IsChecked="{Binding IsRenderingParametersPanelVisible}" ToolTip.Tip="{DynamicResource String/SessionControl.RenderingParametersPanel}">
						<Panel>
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Panel.Right}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Panel.Right.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
						</Panel>
					</ToggleButton>

					<!-- Other actions -->
					<ToggleButton Name="otherActionsButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].ShowOtherActions}" IsVisible="{x:Static c:Platform.IsNotMacOS}" ToolTip.Tip="{DynamicResource String/SessionControl.OtherActions}">
						<Panel>
							<Image Classes="Icon" Source="{StaticResource Image/Icon.More}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{StaticResource Image/Icon.More.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static aConverters:ObjectConverters.IsNotNull}}">
								<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.Update.Colored}"/>
							</Border>
						</Panel>
					</ToggleButton>

				</StackPanel>

			</Grid>
		</Border>
		<ProgressBar Background="{x:Null}" CornerRadius="0" IsIndeterminate="True" IsVisible="{Binding IsProcessingImage}" MaxHeight="{StaticResource Double/SessionControl.ImageProgressBar.Height}" MinHeight="{StaticResource Double/SessionControl.ImageProgressBar.Height}" VerticalAlignment="Bottom"/>

		<!-- Viewer -->
		<Grid Name="workingAreaGrid" Grid.Row="1">

			<!-- Columns -->
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition MaxWidth="{x:Static appViewModels:Session.MaxRenderingParametersPanelSize}" MinWidth="{x:Static appViewModels:Session.MinRenderingParametersPanelSize}" Width="0"/>
			</Grid.ColumnDefinitions>

			<!-- Histograms -->
			<Border Background="{DynamicResource Brush/WorkingArea.Background}"/>
			<Border Background="{DynamicResource Brush/WorkingArea.Panel.Background}" IsVisible="{Binding IsHistogramsVisible}" Width="{StaticResource Double/SessionControl.HistogramsPanel.Width}">
				<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
					<StackPanel Margin="{StaticResource Thickness/SessionControl.HistogramsPanel.Padding}">

						<!-- Styles -->
						<StackPanel.Styles>
							<Style Selector="appControls|BitmapHistogramsView">
								<Setter Property="Height" Value="{StaticResource Double/SessionControl.Histogram.Height}"/>
								<Setter Property="HorizontalAlignment" Value="Stretch"/>
							</Style>
						</StackPanel.Styles>

						<!-- Luminance -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Luminance}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsLuminanceHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Red -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Red}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsRedHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Green -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Green}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsGreenHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Blue -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Blue}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsBlueHistogramVisible="True"/>
						
					</StackPanel>
				</ScrollViewer>
			</Border>

			<!-- Image viewer -->
			<Grid Name="imageViewerGrid" Background="{DynamicResource Brush/WorkingArea.Background}" DragDrop.AllowDrop="True" Grid.Column="1" RowDefinitions="*,Auto">

				<!-- Hint -->
				<Viewbox Margin="{StaticResource Thickness/SessionControl.ImageViewer.Padding}" Stretch="Uniform" StretchDirection="DownOnly">
					<Panel>

						<!-- Drag-drop hint -->
						<Border IsVisible="{Binding !IsOpeningSourceFile}">
							<StackPanel HorizontalAlignment="Center" IsVisible="{Binding !IsSourceFileOpened}" Orientation="Horizontal" VerticalAlignment="Center">
								<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.DragDropHint.Section1}"/>
								<Image Classes="SessionControl_ImageViewer_Hint_Icon" Source="{StaticResource Image/Icon.OpenFile}"/>
								<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.DragDropHint.Section2}"/>
							</StackPanel>
						</Border>

						<!-- Opening file hint -->
						<StackPanel HorizontalAlignment="Center" IsVisible="{Binding IsOpeningSourceFile}" Orientation="Horizontal" VerticalAlignment="Center">
							<Image Classes="SessionControl_ImageViewer_Hint_Icon" Source="{StaticResource Image/Icon.OpenFile}"/>
							<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.OpeningSourceFile}"/>
						</StackPanel>

						<!-- Insufficient memory hint -->
						<StackPanel HorizontalAlignment="Center" IsVisible="{Binding InsufficientMemoryForRenderedImage}" Orientation="Horizontal" VerticalAlignment="Center">
							<Image Classes="SessionControl_ImageViewer_Hint_Icon" Source="{StaticResource Image/Icon.Warning}"/>
							<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.InsufficientMemoryForRenderedImageHint}"/>
						</StackPanel>

						<!-- Rendering error -->
						<StackPanel HorizontalAlignment="Center" IsVisible="{Binding HasRenderingError}" Orientation="Horizontal" VerticalAlignment="Center">
							<Image Classes="SessionControl_ImageViewer_Hint_Icon" Source="{StaticResource Image/Icon.Error}"/>
							<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.RenderingErrorOccurred}"/>
						</StackPanel>

					</Panel>
				</Viewbox>

				<!-- Image -->
				<ScrollViewer x:Name="imageScrollViewer" AllowAutoHide="False" HorizontalScrollBarVisibility="{Binding !FitImageToViewport, Converter={x:Static appControls:SessionControl.BooleanToScrollBarVisibilityConverter}}" PointerPressed="OnImageScrollViewerPointerPressed" VerticalScrollBarVisibility="{Binding !FitImageToViewport, Converter={x:Static appControls:SessionControl.BooleanToScrollBarVisibilityConverter}}">
					<Panel Margin="{StaticResource Thickness/SessionControl.ImageViewer.Padding}" UseLayoutRounding="True">
						<Border Name="imageContainerBorder" HorizontalAlignment="Center" VerticalAlignment="Center">
							<Border.Background>
								<ImageBrush DestinationRect="0,0,20,20" Source="/Resources/RenderedImageBackground.png" TileMode="Tile"/>
							</Border.Background>
							<LayoutTransformControl>
								<Border>
									<Image x:Name="image" DoubleTapped="OnImageDoubleTapped" Height="{Binding ImageDisplaySize.Height}" HorizontalAlignment="Center" PointerLeave="OnImagePointerLeave" PointerMoved="OnImagePointerMoved" PointerPressed="OnImagePointerPressed" PointerReleased="OnImagePointerReleased" RenderOptions.BitmapInterpolationMode="{Binding $parent[UserControl].EffectiveRenderedImageInterpolationMode}" Source="{Binding $parent[UserControl].EffectiveRenderedImage}" VerticalAlignment="Center" Width="{Binding ImageDisplaySize.Width}"/>
								</Border>
								<LayoutTransformControl.LayoutTransform>
									<RotateTransform Angle="{Binding ImageDisplayRotation}"/>
								</LayoutTransformControl.LayoutTransform>
							</LayoutTransformControl>
						</Border>
						<Canvas ClipToBounds="False" Height="{Binding #imageContainerBorder.Bounds.Height}" HorizontalAlignment="Center" IsVisible="{Binding HasRenderedImage}" VerticalAlignment="Center" Width="{Binding #imageContainerBorder.Bounds.Width}"/>
					</Panel>
				</ScrollViewer>

				<!-- Pixel information -->
				<Border Classes="StatusBar" Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Grid.Row="1" IsVisible="{Binding HasRenderedImage}">
					<Border.Styles>
						<Style Selector="TextBlock">
							<Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}"/>
							<Setter Property="Margin" Value="{StaticResource Thickness/StatusBar.Item.Margin}"/>
							<Setter Property="VerticalAlignment" Value="Center"/>
						</Style>
					</Border.Styles>
					<Panel>
						<TextBlock Opacity="0" Text="{DynamicResource String/SessionControl.SelectedPixel.None}"/>
						<TextBlock IsVisible="{Binding !HasSelectedRenderedImagePixel}" Text="{DynamicResource String/SessionControl.SelectedPixel.None}" TextWrapping="Wrap"/>
						<WrapPanel Opacity="{Binding HasSelectedRenderedImagePixel, Converter={x:Static abConverters:BooleanToValueConverters.BooleanToOpacity}}" Orientation="Horizontal">
							
							<!-- Position -->
							<StackPanel Orientation="Horizontal">
								<Image Classes="StatusBar_Icon" Source="{StaticResource Image/Icon.Coordinates}"/>
								<Panel>
									<TextBlock Text="(0000, 0000)" Opacity="0"/>
									<abControls:FormattedTextBlock Arg1="{Binding SelectedRenderedImagePixelPositionX}" Arg2="{Binding SelectedRenderedImagePixelPositionY}" Format="({0}, {1})"/>
								</Panel>
								<Separator Classes="StatusBar_Separator"/>
							</StackPanel>

							<!-- Color -->
							<StackPanel Orientation="Horizontal">
								<Border BorderBrush="{DynamicResource SystemControlForegroundBaseHighBrush}" BorderThickness="1" Height="{StaticResource Double/StatusBar.Icon.Size}" Width="{StaticResource Double/StatusBar.Icon.Size}">
									<Border.Background>
										<SolidColorBrush Color="{Binding SelectedRenderedImagePixelColor}"/>
									</Border.Background>
								</Border>
								<Separator Classes="StatusBar_Separator"/>
							</StackPanel>

							<!-- ARGB Color -->
							<StackPanel IsVisible="{Binding $parent[UserControl].ShowSelectedRenderedImagePixelArgbColor}" Orientation="Horizontal">
								<Panel>
									<TextBlock Text="ARGB(000, 000, 000, 000)" Opacity="0"/>
									<abControls:FormattedTextBlock Arg1="{Binding SelectedRenderedImagePixelColor.A}" Arg2="{Binding SelectedRenderedImagePixelColor.R}" Arg3="{Binding SelectedRenderedImagePixelColor.G}" Arg4="{Binding SelectedRenderedImagePixelColor.B}" Format="ARGB({0}, {1}, {2}, {3})"/>
								</Panel>
								<Separator Classes="StatusBar_Separator"/>
							</StackPanel>

							<!-- CIELAB Color -->
							<StackPanel IsVisible="{Binding $parent[UserControl].ShowSelectedRenderedImagePixelLabColor}" Orientation="Horizontal">
								<Panel>
									<TextBlock Text="L*a*b*(000.00, 000.00, 000.00)" Opacity="0"/>
									<abControls:FormattedTextBlock Arg1="{Binding SelectedRenderedImagePixelLabColor.Item1}" Arg2="{Binding SelectedRenderedImagePixelLabColor.Item2}" Arg3="{Binding SelectedRenderedImagePixelLabColor.Item3}" Format="L*a*b*({0:F2}, {1:F2}, {2:F2})"/>
								</Panel>
								<Separator Classes="StatusBar_Separator"/>
							</StackPanel>

							<!-- XYZ Color -->
							<Panel IsVisible="{Binding $parent[UserControl].ShowSelectedRenderedImagePixelXyzColor}">
								<TextBlock Text="XYZ(000.00, 000.00, 000.00)" Opacity="0"/>
								<abControls:FormattedTextBlock Arg1="{Binding SelectedRenderedImagePixelXyzColor.Item1}" Arg2="{Binding SelectedRenderedImagePixelXyzColor.Item2}" Arg3="{Binding SelectedRenderedImagePixelXyzColor.Item3}" Format="XYZ({0:F2}, {1:F2}, {2:F2})"/>
							</Panel>
						</WrapPanel>
					</Panel>
				</Border>
				
			</Grid>

			<!-- Rendering parameters panel -->
			<Border Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Grid.Column="3" IsVisible="{Binding IsRenderingParametersPanelVisible}">
				<ScrollViewer Name="renderingParamsPanelScrollViewer" HorizontalScrollBarVisibility="Disabled">
					<StackPanel IsEnabled="{Binding IsSourceFileOpened}" Margin="{StaticResource Thickness/SessionControl.OptionsPanel.Padding}">

						<!-- Styles -->
						<StackPanel.Styles>
							<Style Selector="abControls|IntegerTextBox">
								<Setter Property="IsNullValueAllowed" Value="False"/>
							</Style>
							<Style Selector="TextBlock">
								<Setter Property="TextTrimming" Value="CharacterEllipsis"/>
							</Style>
						</StackPanel.Styles>

						<!-- Profile -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Profile}"/>
						<ComboBox Classes="Dialog_ComboBox" Items="{Binding Profiles}" SelectedItem="{Binding Profile, Mode=TwoWay}">
							<ComboBox.ItemTemplate>
								<DataTemplate>
									<Grid ColumnDefinitions="*,Auto">
										<TextBlock Text="{Binding Name}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
										<Border Background="{DynamicResource Brush/SessionControl.ProfileTypeLabel.Background.FileFormat}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{StaticResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsFileFormat}" Margin="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
											<TextBlock FontSize="{StaticResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/SessionControl.ProfileTypeLabel.FileFormat}"/>
										</Border>
									</Grid>
								</DataTemplate>
							</ComboBox.ItemTemplate>
						</ComboBox>
						<Separator Classes="Dialog_Separator"/>

						<!-- Data offset -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.DataOffset}"/>
						<abControls:IntegerTextBox Classes="Dialog_TextBlock" Minimum="0" Value="{Binding DataOffset, Mode=TwoWay}"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Frame padding bytes -->
						<StackPanel IsVisible="{Binding HasMultipleFrames}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.FramePaddingSize}"/>
							<abControls:IntegerTextBox Classes="Dialog_TextBlock" Minimum="0" Value="{Binding FramePaddingSize, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Image renderer -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ImageRenderer}"/>
						<ComboBox Name="imageRendererComboBox" Classes="Dialog_ComboBox" Items="{x:Static appImageRenderers:ImageRenderers.All}" SelectedItem="{Binding ImageRenderer, Mode=TwoWay}">
							<ComboBox.ItemTemplate>
								<DataTemplate>
									<Grid ColumnDefinitions="*,Auto">
										<TextBlock Text="{Binding Format, Converter={x:Static appConverters:ImageFormatConverter.Default}}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
										<Border Background="{Binding Format.Category, Converter={x:Static appConverters:ImageFormatCategoryToBrushConverter.Default}}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{StaticResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" Margin="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
											<TextBlock FontSize="{StaticResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{Binding Format.Category, Converter={x:Static appConverters:EnumConverters.ImageFormatCategory}}"/>
										</Border>
									</Grid>
								</DataTemplate>
							</ComboBox.ItemTemplate>
						</ComboBox>
						<Separator Classes="Dialog_Separator"/>

						<!-- Byte ordering -->
						<StackPanel IsVisible="{Binding HasMultipleByteOrderings}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ByteOrdering}"/>
							<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type app:ByteOrdering}" SelectedItem="{Binding ByteOrdering, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Bayer Pattern -->
						<StackPanel IsVisible="{Binding IsBayerPatternSupported}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.BayerPattern}"/>
							<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type appMedia:BayerPattern}" SelectedItem="{Binding BayerPattern, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- YUV to RGB converte -->
						<StackPanel IsVisible="{Binding IsYuvToBgraConverterSupported}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.YuvToBgraConverter}"/>
							<ComboBox Classes="Dialog_ComboBox" Items="{x:Static appMedia:YuvToBgraConverter.All}" SelectedItem="{Binding YuvToBgraConverter, Mode=TwoWay}">
								<ComboBox.ItemTemplate>
									<DataTemplate>
										<TextBlock Text="{Binding Converter={x:Static appConverters:YuvToBgraConverterToStringConverter.Default}}"/>
									</DataTemplate>
								</ComboBox.ItemTemplate>
							</ComboBox>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Color space -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ColorSpace}"/>
						<Panel>
							<abControls:LinkTextBlock Command="{Binding $parent[UserControl].ShowColorSpaceManagementOptions}" IsVisible="{Binding !IsColorSpaceManagementEnabled}" Text="{DynamicResource String/SessionControl.ColorSpace.Disabled}" TextWrapping="Wrap"/>
							<StackPanel IsVisible="{Binding IsColorSpaceManagementEnabled}">
								<ComboBox Name="colorSpaceComboBox" Classes="Dialog_ComboBox" Items="{Binding ColorSpaces}" SelectedItem="{Binding ColorSpace, Mode=TwoWay}" VerticalAlignment="Center">
									<ComboBox.ItemTemplate>
										<DataTemplate>
											<Grid ColumnDefinitions="*,Auto">
												<TextBlock Text="{Binding Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}" VerticalAlignment="Center"/>
												<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.EmbeddedInFile}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{StaticResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsEmbedded}" Margin="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
													<TextBlock FontSize="{StaticResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/SessionControl.ColorSpace.Embedded}"/>
												</Border>
												<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.SystemDefined}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsSystemDefined}" Margin="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
													<TextBlock FontSize="{StaticResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/SessionControl.ColorSpace.SystemDefined}"/>
												</Border>
												<Border Background="{DynamicResource Brush/SessionControl.ColorSpaceLabel.Background.Custom}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{StaticResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" IsVisible="{Binding IsUserDefined}" Margin="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Margin}" Padding="{StaticResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
													<TextBlock FontSize="{StaticResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{DynamicResource String/Common.Custom}"/>
												</Border>
											</Grid>
										</DataTemplate>
									</ComboBox.ItemTemplate>
								</ComboBox>
								<abControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Command="{Binding $parent[UserControl].ShowColorSpaceInfo}" Text="{DynamicResource String/Common.Details.WithDialog}"/>
								<StackPanel IsVisible="{Binding !ColorSpace.IsLinear}">
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.UseLinearColorSpace}"/>
									<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding UseLinearColorSpace, Mode=TwoWay}"/>
								</StackPanel>
							</StackPanel>
						</Panel>
						<Separator Classes="Dialog_Separator"/>

						<!-- Demisaicing -->
						<StackPanel IsVisible="{Binding IsDemosaicingSupported}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Demosaicing}"/>
							<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding Demosaicing, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Dimensions -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ImageDimensions}"/>
						<Grid ColumnDefinitions="*,Auto,*">
							<abControls:IntegerTextBox Classes="Dialog_TextBox" Maximum="65535" Minimum="1" Value="{Binding ImageWidth, Mode=TwoWay}"/>
							<TextBlock Grid.Column="1" Text=" Ã— " VerticalAlignment="Center"/>
							<abControls:IntegerTextBox Classes="Dialog_TextBox" Grid.Column="2" Maximum="65535" Minimum="1" Value="{Binding ImageHeight, Mode=TwoWay}"/>
						</Grid>
						<Separator Classes="Dialog_Separator_Small" IsVisible="{Binding !IsCompressedImageFormat}"/>
						<ToggleButton Name="evaluateImageDimensionsButton" Classes="SessionControl_OptionsPanel_ToggleButton" Command="{Binding $parent[UserControl].ShowEvaluateImageDimensionsMenuCommand}" Content="{DynamicResource String/SessionControl.EvaluateImageDimensions}" IsEnabled="{Binding CanChangeImageRenderer}" IsVisible="{Binding !IsCompressedImageFormat}"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Plane options #1 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.1}" IsExpanded="True" IsVisible="{Binding HasImagePlane1}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" Value="{Binding RowStride1, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustablePixelStride1}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustablePixelStride1}" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustablePixelStride1}" Value="{Binding PixelStride1, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits1}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits1}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustableEffectiveBits1}" Minimum="1" Value="{Binding EffectiveBits1, Mode=TwoWay}"/>
								<StackPanel IsVisible="{Binding AreAdjustableBlackWhiteLevels1}">
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.BlackLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="0" Value="{Binding BlackLevel1, Mode=TwoWay}"/>
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.WhiteLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="1" Value="{Binding WhiteLevel1, Mode=TwoWay}"/>
								</StackPanel>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane1}"/>

						<!-- Plane options #2 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.2}" IsExpanded="True" IsVisible="{Binding HasImagePlane2}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" Value="{Binding RowStride2, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustablePixelStride2}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustablePixelStride2}" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustablePixelStride2}" Value="{Binding PixelStride2, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits2}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits2}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustableEffectiveBits2}" Minimum="1" Value="{Binding EffectiveBits2, Mode=TwoWay}"/>
								<StackPanel IsVisible="{Binding AreAdjustableBlackWhiteLevels2}">
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.BlackLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="0" Value="{Binding BlackLevel2, Mode=TwoWay}"/>
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.WhiteLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="1" Value="{Binding WhiteLevel2, Mode=TwoWay}"/>
								</StackPanel>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane2}"/>

						<!-- Plane options #3 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.3}" IsExpanded="True" IsVisible="{Binding HasImagePlane3}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" Value="{Binding RowStride3, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustablePixelStride3}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustablePixelStride3}" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustablePixelStride3}" Value="{Binding PixelStride3, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits3}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits3}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<abControls:IntegerTextBox Classes="Dialog_TextBox" IsVisible="{Binding IsAdjustableEffectiveBits3}" Minimum="1" Value="{Binding EffectiveBits3, Mode=TwoWay}"/>
								<StackPanel IsVisible="{Binding AreAdjustableBlackWhiteLevels3}">
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.BlackLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="0" Value="{Binding BlackLevel3, Mode=TwoWay}"/>
									<Separator Classes="Dialog_Separator"/>
									<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.WhiteLevel}"/>
									<abControls:IntegerTextBox Classes="Dialog_TextBox" Minimum="1" Value="{Binding WhiteLevel3, Mode=TwoWay}"/>
								</StackPanel>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane3}"/>

						<!-- RGB gain -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.RgbGain}" IsExpanded="True" IsVisible="{Binding IsRgbGainSupported}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RedColorGain}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" FormatString="F2" Maximum="{x:Static appImageRenderers:ImageRenderingOptions.MaxRgbGain}" Minimum="{x:Static appImageRenderers:ImageRenderingOptions.MinRgbGain}" Increment="0.1" Value="{Binding RedColorGain, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.GreenColorGain}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" FormatString="F2" Maximum="{x:Static appImageRenderers:ImageRenderingOptions.MaxRgbGain}" Minimum="{x:Static appImageRenderers:ImageRenderingOptions.MinRgbGain}" Increment="0.1" Value="{Binding GreenColorGain, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.BlueColorGain}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" FormatString="F2" Maximum="{x:Static appImageRenderers:ImageRenderingOptions.MaxRgbGain}" Minimum="{x:Static appImageRenderers:ImageRenderingOptions.MinRgbGain}" Increment="0.1" Value="{Binding BlueColorGain, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding SelectRgbGainCommand}" Content="{DynamicResource String/SessionControl.SelectRgbGain}"/>
								<Separator Classes="Dialog_Separator_Small"/>
								<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding ResetRgbGainCommand}" Content="{DynamicResource String/Common.Reset}"/>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding IsRgbGainSupported}"/>

						<!-- Apply profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding ApplyProfileCommand}" Content="{DynamicResource String/SessionControl.ApplyProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Save profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding SaveProfileCommand}" Content="{DynamicResource String/SessionControl.SaveProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Save as new profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding $parent[UserControl].SaveAsNewProfileCommand}" Content="{DynamicResource String/SessionControl.SaveAsNewProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Delete profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding DeleteProfileCommand}" Content="{DynamicResource String/SessionControl.DeleteProfile}"/>

					</StackPanel>
				</ScrollViewer>
			</Border>

			<!-- Splitter -->
			<GridSplitter Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Classes="GridSplitter_Vertical" DragCompleted="OnOptionsPanelSplitterDragCompleted" DragStarted="OnOptionsPanelSplitterDragStarted" Grid.Column="2" IsVisible="{Binding IsRenderingParametersPanelVisible}"/>
			
		</Grid>

		<!-- Status bar -->
		<Border Background="{x:Null}" Classes="StatusBar" Grid.Row="2">

			<ia:Interaction.Behaviors>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Inactive">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionControl.StatusBar.Background.Inactive}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Error">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionControl.StatusBar.Background.Error}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Active">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/StatusBar.Background}"/>
				</iaCore:DataTriggerBehavior>
			</ia:Interaction.Behaviors>
			
			<Grid ColumnDefinitions="*,Auto" HorizontalAlignment="Stretch">

				<!-- Reserve -->
				<TextBlock Classes="StatusBar_TextBlock" Grid.ColumnSpan="2" Text="{DynamicResource String/SessionControl.NoSourceFileOpened}" Opacity="0"/>

				<!-- Left part -->
				<StackPanel ClipToBounds="True" Orientation="Horizontal">

					<!-- File actions -->
					<StackPanel Orientation="Horizontal">
						<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding !IsSourceFileOpened}" Text="{DynamicResource String/SessionControl.NoSourceFileOpened}"/>
						<ToggleButton Name="fileActionsButton" Classes="StatusBar_ToggleButton" Command="{Binding $parent[UserControl].ShowFileActions}" IsVisible="{Binding IsSourceFileOpened}" MaxWidth="{StaticResource Double/SessionControl.StatusBar.FileActions.MaxWidth}">
							<StackPanel Orientation="Horizontal">
								<Image Classes="StatusBar_IconWithText">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.File.Outline}"/>
									</DrawingImage>
								</Image>
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding SourceFileSizeString}"/>
								<Image Classes="StatusBar_DropDownIcon">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.MoveUp}"/>
									</DrawingImage>
								</Image>
							</StackPanel>
						</ToggleButton>
						<Separator Classes="StatusBar_Separator"/>
					</StackPanel>

					<!-- Source data size -->
					<StackPanel Background="{x:Static Brushes.Transparent}" Orientation="Horizontal" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.SourceDataSize}">
						<StackPanel.IsVisible>
							<MultiBinding Converter="{x:Static aConverters:BoolConverters.And}">
								<Binding Path="HasRenderedImage"/>
								<Binding Path="HasSourceDataSize"/>
							</MultiBinding>
						</StackPanel.IsVisible>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.BinaryData}"/>
							</DrawingImage>
						</Image>
						<TextBlock Classes="StatusBar_TextBlock" Text="{Binding SourceDataSize, StringFormat={}{0:N0} }"/>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/Common.Bytes}"/>
						<Separator Classes="StatusBar_Separator"/>
					</StackPanel>

					<!-- Screen color space -->
					<Button Classes="StatusBar_Button" Command="{Binding $parent[UserControl].ShowScreenColorSpaceInfo}" IsVisible="{Binding IsColorSpaceManagementEnabled}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.ScreenColorSpace}">
						<StackPanel Orientation="Horizontal">
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Screen}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" Text="{Binding Owner.EffectiveScreenColorSpace, Converter={x:Static appConverters:ColorSpaceToStringConverter.Default}}"/>
						</StackPanel>
					</Button>
					<Separator Classes="StatusBar_Separator" IsVisible="{Binding IsColorSpaceManagementEnabled}"/>

				</StackPanel>

				<!-- Right part -->
				<StackPanel Grid.Column="1" Orientation="Horizontal">
					
					<!-- Saving image -->
					<StackPanel IsVisible="{Binding IsSavingImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Save.Outline}"/>
							</DrawingImage>
						</Image>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionControl.SavingRenderedImage}"/>
					</StackPanel>

					<!-- Filtering image -->
					<StackPanel IsVisible="{Binding IsFilteringRenderedImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.ImageFilter}"/>
							</DrawingImage>
						</Image>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionControl.FilteringRenderedImage}"/>
					</StackPanel>

					<!-- Rendering image -->
					<StackPanel IsVisible="{Binding IsRenderingImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Waiting.Outline}"/>
							</DrawingImage>
						</Image>
						<Panel>
							<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding IsConvertingColorSpace}" Text="{DynamicResource String/SessionControl.ConvertingColorSpace}"/>
							<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding !IsConvertingColorSpace}" Text="{DynamicResource String/SessionControl.RenderingImage}"/>
						</Panel>
					</StackPanel>

					<!-- Process info -->
					<StackPanel IsVisible="{Binding $parent[UserControl].ShowProcessInfo}" Orientation="Horizontal">
						
						<!-- UI response duration -->
						<StackPanel IsVisible="{Binding Source={x:Static app:App.Current}, Path=IsDebugMode}" Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Speed.Outline}"/>
								</DrawingImage>
							</Image>
							<Panel>
								<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="000 ms   "/>
								<TextBlock Classes="StatusBar_TextBlock" HorizontalAlignment="Left" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.UIResponseDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.UIResponseDuration}"/>
							</Panel>
						</StackPanel>

						<!-- CPU usage -->
						<Separator Classes="StatusBar_Separator"/>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Cpu.Outline}"/>
							</DrawingImage>
						</Image>
						<Panel>
							<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="00.0%"/>
							<TextBlock Classes="StatusBar_TextBlock" HorizontalAlignment="Left" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.CpuUsagePercentage, StringFormat={}{0:F1}%}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.CpuUsage}"/>
						</Panel>

						<!-- Memory usage -->
						<Separator Classes="StatusBar_Separator"/>
						<Image Classes="StatusBar_IconWithText">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Memory.Outline}"/>
							</DrawingImage>
						</Image>
						<Panel>
							<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="000.0%"/>
							<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding RenderedImagesMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.RenderedImagesMemoryUsage}"/>
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding TotalRenderedImagesMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}, StringFormat={}/{0}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.TotalRenderedImagesMemoryUsage}"/>
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.PrivateMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}, StringFormat={}/{0}}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.PrivateMemoryUsage}"/>
							</StackPanel>
						</Panel>

					</StackPanel>

				</StackPanel>
				
			</Grid>
		</Border>
		
	</Grid>
</UserControl>
