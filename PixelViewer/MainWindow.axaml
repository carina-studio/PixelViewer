<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abConverters="using:CarinaStudio.Data.Converters"
		xmlns:aConverters="using:Avalonia.Data.Converters"
		xmlns:appConverters="using:Carina.PixelViewer.Data.Converters"
        xmlns:appViewModels="using:Carina.PixelViewer.ViewModels"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="Carina.PixelViewer.MainWindow"
		Classes="Tabbed"
        Icon="/PixelViewer.ico"
		MinHeight="{DynamicResource Double/MainWindow.MinHeight}"
		MinWidth="{DynamicResource Double/MainWindow.MinWidth}">

	<Window.ExtendClientAreaTitleBarHeightHint>
		<MultiBinding Converter="{x:Static abConverters:DoubleConverters.Addition}">
			<Binding ElementName="tabControl" Path="TabStripSize"/>
			<Binding RelativeSource="{RelativeSource Mode=Self}" Path="ContentPadding.Top"/>
		</MultiBinding>
	</Window.ExtendClientAreaTitleBarHeightHint>

	<!-- Data templates -->
	<Window.DataTemplates>
		<DataTemplate DataType="{x:Type appViewModels:Session}">
			<Grid ColumnDefinitions="*,Auto">
				<Grid.ContextMenu>
					<ContextMenu Placement="Bottom">
						<MenuItem Command="{Binding $parent[Window].SetCustomSessionTitleCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/MainWindow.SetCustomSessionTitle}">
							<MenuItem.Icon>
								<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
							</MenuItem.Icon>
						</MenuItem>
						<MenuItem Command="{Binding $parent[Window].ResetSessionTitleCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/MainWindow.ResetSessionTitle}" IsEnabled="{Binding CustomTitle, Converter={x:Static aConverters:ObjectConverters.IsNotNull}}"/>
						<Separator/>
						<MenuItem Command="{Binding $parent[Window].MoveSessionToNewWorkspaceCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/Common.OpenInNewWindow}" IsEnabled="{Binding $parent[Window].HasMultipleSessions}">
							<MenuItem.Icon>
								<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.AddWindow}"/>
							</MenuItem.Icon>
						</MenuItem>
						<Separator/>
						<MenuItem Command="{Binding $parent[Window].CloseMainTabItemCommand}" CommandParameter="{Binding $parent[TabItem]}" Header="{DynamicResource String/Common.CloseTab}" InputGesture="Ctrl+W">
							<MenuItem.Icon>
								<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.CloseTab}"/>
							</MenuItem.Icon>
						</MenuItem>
					</ContextMenu>
				</Grid.ContextMenu>
				<Grid Background="{x:Static Brushes.Transparent}" ColumnDefinitions="Auto,*">
					<ToolTip.Tip>
						<StackPanel Margin="{DynamicResource Thickness/MainWindow.TabItem.ToolTip.Padding}">
							<StackPanel.Styles>
								<Style Selector="Image.ToolTipIcon">
									<Setter Property="Height" Value="{DynamicResource Double/MainWindow.TabItem.ToolTip.Icon.Size}"/>
									<Setter Property="Margin" Value="{DynamicResource Thickness/MainWindow.TabItem.ToolTip.Icon.Margin}"/>
									<Setter Property="Stretch" Value="Uniform"/>
									<Setter Property="VerticalAlignment" Value="Center"/>
									<Setter Property="Width" Value="{DynamicResource Double/MainWindow.TabItem.ToolTip.Icon.Size}"/>
								</Style>
								<Style Selector="TextBlock.ToolTipText">
									<Setter Property="VerticalAlignment" Value="Center"/>
								</Style>
							</StackPanel.Styles>
							<Panel>
								<TextBlock FontWeight="Bold" IsVisible="{Binding SourceFileName, Converter={x:Static aConverters:StringConverters.IsNotNullOrEmpty}}" Text="{Binding SourceFileName}" TextWrapping="Wrap"/>
								<TextBlock FontWeight="Bold" IsVisible="{Binding SourceFileName, Converter={x:Static aConverters:StringConverters.IsNullOrEmpty}}" Text="{DynamicResource String/Session.EmptyTitle}"/>
							</Panel>
							<StackPanel IsVisible="{Binding SourceFileName, Converter={x:Static aConverters:StringConverters.IsNotNullOrEmpty}}">
								<Separator Classes="Dialog_Separator_Small"/>
								<StackPanel IsVisible="{Binding !IsHibernated}">
									<StackPanel Orientation="Horizontal">
										<TextBlock Classes="ToolTipText">
											<TextBlock.Text>
												<MultiBinding StringFormat="{}{0}x{1}">
													<Binding Path="ImageWidth"/>
													<Binding Path="ImageHeight"/>
												</MultiBinding>
											</TextBlock.Text>
										</TextBlock>
										<Separator Classes="Dialog_Separator_Small"/>
										<TextBlock Classes="ToolTipText" Text="{Binding ImageRenderer.Format, Converter={x:Static appConverters:ImageFormatConverter.Default}}"/>
									</StackPanel>
									<StackPanel Orientation="Horizontal">
										<TextBlock Classes="ToolTipText" Text="{DynamicResource String/MainWindow.Session.RenderedImagesMemoryUsage}"/>
										<TextBlock Classes="ToolTipText" Text="{Binding RenderedImagesMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}"/>
									</StackPanel>
								</StackPanel>
								<StackPanel IsVisible="{Binding IsHibernated}" Orientation="Horizontal">
									<Image Classes="ToolTipIcon" Source="{DynamicResource Image/Icon.Leaf.Colored}"/>
									<TextBlock Classes="ToolTipText" Text="{DynamicResource String/MainWindow.Session.Hibernated}"/>
								</StackPanel>
							</StackPanel>
						</StackPanel>
					</ToolTip.Tip>
					<Panel Classes="TabItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Tab}" IsVisible="{Binding !IsSourceFileOpened}"/>
						<Panel IsEnabled="{Binding !IsHibernated}" IsVisible="{Binding IsSourceFileOpened}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Image}" IsVisible="{Binding InsufficientMemoryForRenderedImage}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Image.Active}" IsVisible="{Binding !InsufficientMemoryForRenderedImage}"/>
						</Panel>
					</Panel>
					<TextBlock Classes="TabItem_TextBlock" Grid.Column="1" Text="{Binding Title}"/>
				</Grid>
				<Button Classes="TabItem_Button" Command="{Binding $parent[Window].CloseMainTabItemCommand}" CommandParameter="{Binding $parent[TabItem]}" Grid.Column="1" ToolTip.Tip="{DynamicResource String/Common.CloseTab.WithGesture}">
					<Button.IsVisible>
						<MultiBinding Converter="{x:Static BoolConverters.Or}">
							<Binding Path="IsSelected" RelativeSource="{RelativeSource AncestorType={x:Type TabItem}}"/>
							<Binding Path="IsPointerOver" RelativeSource="{RelativeSource AncestorType={x:Type TabItem}}"/>
						</MultiBinding>
					</Button.IsVisible>
					<Image Classes="Icon" Source="{DynamicResource Image/Icon.Close}"/>
				</Button>
			</Grid>
		</DataTemplate>
	</Window.DataTemplates>

	<!-- Resources -->
	<Window.Resources>

		<!-- Native menu -->
		<NativeMenu x:Key="nativeMenu">
			<NativeMenuItem Header="{DynamicResource String/MainWindow.Windows}">
				<NativeMenuItem.Menu>
					<NativeMenu>
						<NativeMenuItem Command="{Binding $self.CreateMainWindow}" Header="{DynamicResource String/Common.CreateWindow}" Gesture="Cmd+N"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Horizontal}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Horizontal}"/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Vertical}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Vertical}"/>
						<NativeMenuItem Command="{Binding $self.LayoutMainWindowsCommand}" CommandParameter="{x:Static asControls:MultiWindowLayout.Tile}" Header="{DynamicResource String/MainWindow.LayoutMainWindows.Tile}"/>
					</NativeMenu>
				</NativeMenuItem.Menu>
			</NativeMenuItem>
			<NativeMenuItem Header="{DynamicResource String/MainWindow.Tabs}">
				<NativeMenuItem.Menu>
					<NativeMenu>
						<NativeMenuItem Command="{Binding $self.CreateMainTabItem}" Header="{DynamicResource String/Common.CreateTab}"  Gesture="Cmd+T"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.SetCurrentCustomSessionTitle}" Header="{DynamicResource String/MainWindow.SetCustomSessionTitle}"/>
						<NativeMenuItem Command="{Binding $self.ResetCurrentSessionTitle}" Header="{DynamicResource String/MainWindow.ResetSessionTitle}" IsEnabled="{Binding ActivatedSession.CustomTitle, Converter={x:Static aConverters:ObjectConverters.IsNotNull}}"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.MoveCurrentSessionToNewWorkspace}" Header="{DynamicResource String/Common.OpenInNewWindow}" IsEnabled="{Binding $self.HasMultipleSessions}"/>
						<NativeMenuItemSeparator/>
						<NativeMenuItem Command="{Binding $self.CloseCurrentMainTabItem}" Header="{DynamicResource String/Common.CloseTab}" Gesture="Cmd+W"/>
					</NativeMenu>
				</NativeMenuItem.Menu>
			</NativeMenuItem>
		</NativeMenu>

	</Window.Resources>

	<!-- Styles -->
	<Window.Styles>
		<Style Selector="CaptionButtons">
			<Setter Property="MaxHeight" Value="{Binding $parent[Window].ExtendClientAreaTitleBarHeightHint}"/>
		</Style>
	</Window.Styles>
	
	<!-- Content -->
	<Panel>

		<!-- Layout -->
		<Border Name="baseBorder">
			<asControls:TabControl Name="tabControl" DragDrop.AllowDrop="True" DragLeaveItem="OnDragLeaveTabItem" DragOverItem="OnDragOverTabItem" DropOnItem="OnDropOnTabItem" ItemDragged="OnTabItemDragged" Padding="0">

				<!-- New tab -->
				<asControls:TabItem Classes="Empty">
					<TabItem.Header>
						<Button Classes="AddTabItem" Command="{Binding $parent[Window].CreateMainTabItem}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Add}"/>
						</Button>
					</TabItem.Header>
				</asControls:TabItem>

			</asControls:TabControl>
		</Border>
		
		<!-- Notifications -->
		<DockPanel>
			<Border Classes="StatusBar" Background="{x:Null}" DockPanel.Dock="Bottom">
				<TextBlock Classes="StatusBar_TextBlock" Foreground="{x:Null}" Text=" "/>
			</Border>
			<asControls:NotificationPresenter Name="notificationPresenter"/>
		</DockPanel>
		
	</Panel>
	
</Window>
